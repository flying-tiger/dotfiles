#----------------------------------------------------------------------
# Basic Terminal Configuration
#----------------------------------------------------------------------
if [ -t 1 ]; then
    # Only run for terminals with a tty
    echo "Sourcing dotfiles/config/bash..."
    export PS1="\u | \h | \W $ "
    bind '"\e[A":history-search-backward'
    bind '"\e[B":history-search-forward'
    umask 0027
    source ${BASH_SOURCE[0]}_completion
fi

#----------------------------------------------------------------------
# Aliases
#----------------------------------------------------------------------
alias ..='cdl ..'
alias ...='cdl ../..'
alias ....='cdl ../../..'
alias addx='chmod a+x'
alias clc='clear && ll'
alias diff='gvim -d'
alias edit='gvim'
alias ls='ls -Fh'
alias mkdir='mkdir -p'
alias nowrite='chmod -R a-w'
alias open='gnome-open'
alias path='echo -e ${PATH//:/\\n}'
alias tree='tree -Csuh'
alias view='gvim -RM'

unalias ll  &> /dev/null  # Clear preset alias, if any (Ubunutu)
                          # Use function below instead

#----------------------------------------------------------------------
# Helper Functions
#----------------------------------------------------------------------
function cdl {
  # Chage directory and list contents
  cd $1; ll
}
function ll  {
  # Create paged listing of directory details
  ls -l "$@" | sort -sk 1.1,1.2 | more
}
function mcd {
  # Create an cd into new directory
  mkdir $1; cdl $1
}
function share {
  # Sets group-read permissions on all files/directories
  ROOT=${1:-$(pwd)}
  GROUP=${2:-$(stat -c "%G" $ROOT)}
  echo "Giving group ${GROUP} read-access to ${ROOT}"
  chown -R "$USER":"$GROUP" "$ROOT"
  find "$ROOT" -type f -exec chmod g+r {} +;
  find "$ROOT" -type d -exec chmod g+rxs {} +;
}
function vnc {
  # Usage:  vnc user@server:display
  # Sets up a tunnel to VNC display on specified server before running
  # vncviewer. Makes it easy to connect to a remote desktop via SSH.
  IFS=: read -r vnc_server vnc_display <<< "$1"
  vnc_socket=$(printf 59%02d $vnc_display)
  vnc_name=.vnc_tunnel_$$
  ssh -M -S $vnc_name -fN -L 5900:localhost:$vnc_socket $vnc_server
  ( vncviewer; ssh -S $vnc_name -O exit $vnc_server; ) &
  # Open VNC application in background to free the terminal
}
function append_path {
  # useage: append_path  <path_var>  <path_to_add>
  # Appends the path_to_add to the path_var, but only if it
  # doesn't already exist.
  if [[ ":${!1}:" == *":$2:"* ]]; then
    return
  elif [ -z "${!1}" ]; then
    eval "${1}"="\"${2}\""
  else
    eval "${1}"="\"${!1}\":\"${2}\""
  fi
}
function prepend_path {
  # useage: prepend_path  <path_var>  <path_to_add>
  # Prepends the path_to_add to the path_var, but only if it
  # doesn't already exist.
  if [[ ":${!1}:" == *":$2:"* ]]; then
    return
  elif [ -z "${!1}" ]; then
    eval "${1}"="\"${2}\""
  else
    eval "${1}"="\"${2}\":\"${!1}\""
  fi
}


#----------------------------------------------------------------------
# Machine Specific Configuration
#----------------------------------------------------------------------

